[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1])*16 +13]=SP;

SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1])*16 +11]*512 -1;

backup;

if([SYSTEM_STATUS_TABLE + 5]!=0) then
   
	if([SYSTEM_STATUS_TABLE +1]==SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE +5]==SWAP_OUT) then
    	backup;
    	R1=SWAP_OUT;
    	R2=[SYSTEM_STATUS_TABLE +1];
    	call MOD_6;
    	restore;
    
else
	if([SYSTEM_STATUS_TABLE +1]==SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE +5]==SWAP_IN) then
   	backup;
    	R1=SWAP_IN;
    	R2=[SYSTEM_STATUS_TABLE +1];
    	call MOD_6;
    	restore;
    	endif;
    	endif;

else
    	if([SYSTEM_STATUS_TABLE +2] < MEM_LOW) then
    	[SYSTEM_STATUS_TABLE + 5]=SWAP_OUT;

    	else
    	if([SYSTEM_STATUS_TABLE + 4] != 0) then
    	alias i R5;
    	i=3;
    	while(i < 16) do
    	alias process R6;
    	process = PROCESS_TABLE + i*16;
    	if((([process + 6]==1) && ([process] > MAX_TICK)) || ([SYSTEM_STATUS_TABLE +2] > MEM_HIGH)) then
    	[SYSTEM_STATUS_TABLE +5]=SWAP_IN;
    	break;
    	endif;
    	i=i+1;
    	endwhile;

     	endif;
     	endif;
      	endif;

 	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1])*16 +4]=READY;

	alias j R7;
	j=0;

	while(j < 16) do
   	if([PROCESS_TABLE + (j*16) + 4]!=TERMINATED) then
       	[PROCESS_TABLE + (j*16)]=[PROCESS_TABLE + (j*16)] +1;

   	endif;
    	j=j+1;
  	endwhile;

        backup;
  	call MOD_5;
        restore;

	restore;
 	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1])*16 +13];
 	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1])*16 +9]=0;

ireturn;

