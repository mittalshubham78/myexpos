alias sys_call R1;
alias curr_pid R2;

if(sys_call ==SWAP_OUT) then

	alias i R3;
 	i=3;

        alias swap_out_pid R4;
        swap_out_pid = -1;
        
    	while(i < 16) do
     	if([PROCESS_TABLE + i*16 + 4]==WAIT_PROCESS && [PROCESS_TABLE + i*16 +6]==0) then
 	swap_out_pid =i;
	break;
	endif;
	i=i+1;
	endwhile;

	if(swap_out_pid ==-1) then
 	i=3;
	while(i < 16) do
	if([PROCESS_TABLE +i*16 + 4]==WAIT_SEMAPHORE && [PROCESS_TABLE + i*16 + 6]==0) then
  	swap_out_pid = i;
	break;
	endif;
	i=i+1;
	endwhile;
	endif;
      

	if(swap_out_pid ==-1) then
    	alias process  R5;
	alias max_tick R6;
	max_tick = 0;

	i=3;
	while(i < 16) do
	process =PROCESS_TABLE + i*16;
	alias state R7;
	state = [process + 4];

	if(([process + 6]==1) || (state == TERMINATED) || (state ==RUNNING) || (state ==ALLOCATED)) then
        i=i+1;
    	continue;
	endif;

	if([process + 6] ==0) then
 	if([process] > max_tick) then
   	max_tick = [process];
	swap_out_pid = i;
	endif;
	endif;
	i=i+1;
	endwhile;
	endif;

	if(swap_out_pid ==-1) then
 	[SYSTEM_STATUS_TABLE +5]=0;
	return;
	endif;

       
        alias swap_process R8;
        alias swap_page R9;
        swap_process= PROCESS_TABLE + swap_out_pid*16;
        swap_page =PAGE_TABLE_BASE + swap_out_pid*20;

	[swap_process]=0;
	
        i = 4;

        while(i < 20) do
        
       	alias page R10;
	page = [swap_page + i];

   	if(page == -1) then
        i=i+2;
 	continue;
 	endif;

  
        if(i>=8 && i<=14) then
        backup;
        R1=RELEASE_PAGE;
	R2=[swap_page + i];
        call MOD_2;
        restore;
        [swap_page + i]=-1;
        [swap_page + i+1]="0000";
	endif;

        if((i>=16) || ((i<=7) && [MEMORY_FREE_LIST + page]==1)) then
	
 	alias block R11;
        multipush(R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1=GET_SWAP_BLOCK;
	call MOD_2;
	block = R0;
	multipop(R2,R3,R4,R5,R6,R7,R8,R9,R10);
	
	[DISK_MAP_TABLE + swap_out_pid*10 + (i/2)]=block;
	
        backup;
	R1=DISK_STORE;
	R2=curr_pid;
	R3=page;
	R4=block;
	call MOD_4;
	restore;

	backup;
	R1=RELEASE_PAGE;
	R2=page;
	call MOD_2;
	restore;

	[swap_page + i]=-1;
	[swap_page + i+1]="0000";
	endif;
	
	i=i+2;
	endwhile;

        [swap_process + 6]=1;
	[SYSTEM_STATUS_TABLE + 4]=[SYSTEM_STATUS_TABLE +4]+1;
	[SYSTEM_STATUS_TABLE +5]=0;
	return;
endif;

if(sys_call == SWAP_IN) then
 	
	alias i R3;
	i=3;

	alias swap_in_pid R4;
        alias max_tick R5;
      	max_tick=0;

	swap_in_pid = -1;
	
 	while(i < 15) do
	if([PROCESS_TABLE + i*16 + 6]==1) then
	if(max_tick < [PROCESS_TABLE + i*16]) then
	max_tick = [PROCESS_TABLE + i*16];
	swap_in_pid = i;
	endif;
	endif;

	i=i+1;
	endwhile;

 	if(swap_in_pid ==-1) then
	[SYSTEM_STATUS_TABLE +5]=0;
       	R0=-1;
 	return;
	endif;

   	alias swap_process R6;	
	alias swap_page R7;

	swap_process = PROCESS_TABLE + swap_in_pid*16;
	swap_page = PAGE_TABLE_BASE + swap_in_pid*20;

	[swap_process]=0;
	

        i=2;
        while(i < 10) do

	if(i < 4 || i>=8) then
 	
  	if([DISK_MAP_TABLE + swap_in_pid*10 + i]!=-1)then
        alias free_page R8;
        alias block  R9;
 	block = [DISK_MAP_TABLE + swap_in_pid*10 + i];
	
        multipush(R2,R3,R4,R5,R6,R7,R9);
	R1=GET_FREE_PAGE;
	call MOD_2;
	free_page=R0;
	multipop(R2,R3,R4,R5,R6,R7,R9);


      if(free_page!=-1) then
        backup;
	R1=DISK_LOAD;
	R2=curr_pid; 
	R3=free_page;
	R4=block;
	call MOD_4;
	restore;
       endif;

	backup;
	R1=RELEASE_BLOCK;
	R2=block;
	call MOD_2;
	restore;

	[swap_page + 2*i]=free_page;
	[swap_page + 2*i +1]="0110";
	[DISK_MAP_TABLE + swap_in_pid*10 + i]=-1;

        endif;
	endif;

	i=i+1;
	endwhile;

	[swap_process + 6]=0;
	[SYSTEM_STATUS_TABLE + 4]=[SYSTEM_STATUS_TABLE + 4]-1;
	[SYSTEM_STATUS_TABLE +5]=0;

	return;
endif;

return;
