[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +13]=SP;

alias userSP R0;
userSP = SP;

SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11]*512 -1;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +9]=9;

alias file_name R1;

file_name=[[PTBR+((userSP-4)/512)*2]*512 + ((userSP-4)%512)];

alias present R2;
present=0;

alias i R3;
alias idx R7;
 i=0;

 while(i < MAX_FILE_NUM) do
if(([INODE_TABLE + (i*16)]==EXEC) &&([INODE_TABLE + (i*16) +1]==file_name)) then
      idx=i;
    present=1;
     break;
    endif;
   i=i+1;
  endwhile;

  if(present==0) then
    SP=userSP;
  [[PTBR+((userSP-1)/512)*2]*512 + ((userSP-1) % 512)]=-1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) +9]=0;
    ireturn;
   endif;

  [[PTBR+(2*(userSP-1))/512]*512 + ((userSP-1)%512)]=0;

 alias pid R6;
   pid=[SYSTEM_STATUS_TABLE +1];

 backup;
  R1=EXIT_PROCESS;
 R2=[SYSTEM_STATUS_TABLE +1];
  call MOD_1;
 restore;
 

alias us_ar_page R5;
  us_ar_page = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 11];
   
  [MEMORY_FREE_LIST + us_ar_page]=[MEMORY_FREE_LIST + us_ar_page]+1;

  [SYSTEM_STATUS_TABLE + 2]=[SYSTEM_STATUS_TABLE +2]-1;


    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11]*512 -1;    
   
   [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +4]=RUNNING;

   [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 7]=idx;

  //........PAGE TABLE SETUP.......   

   PTBR=PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE +1]*20;


   [PTBR + 0]=63;
   [PTBR + 1]="0100";
   [PTBR + 2]=64;
   [PTBR + 3]="0100"; 

 //stack
  backup;
  R1=1;
   call MOD_2;
   [PTBR+ 16]=R0;
   [PTBR+ 17]="0110";

  R1=1;
  call MOD_2;
   [PTBR+ 18]=R0;
   [PTBR+ 19]="0110";

   //heap
   [PTBR + 4]=-1;
  [PTBR +5]="0000";

  [PTBR+6]=-1;
  [PTBR+7]="0000";
restore;

  //code pages
    alias pos R8;
    pos=INODE_TABLE + (idx*16);
   
backup;
     if([pos + 8]!=-1) then
       backup;
      R1=GET_CODE_PAGE;
       R2=[pos +8];
       call MOD_2;
      [PTBR+8]=R0;
      [PTBR+9]="0100";
    restore;
     endif;
 
  //   R1=1;
 //   call MOD_2;
 //   [PTBR+8]=R0;
//   [PTBR+9]="0100";


  //    R1=1;
  //  call MOD_2;
 //  [PTBR + 10]=R0;
//    [PTBR+ 11]="0100";

   //  R1=1;
 //   call MOD_2;
 //  [PTBR+ 12]=R0;
 //   [PTBR+13]="0100";

  //  R1=1;
 //  call MOD_2;
 //   [PTBR+14]=R0;
 //  [PTBR+15]="0100";
 

    [PTBR+10]=-1;
    [PTBR+11]="0000";
    [PTBR+12]=-1;
  [PTBR+13]="0000";
   [PTBR+14]=-1;
  [PTBR+15]="0000";

 restore;


//   if([INODE_TABLE + idx*16 +8]!=-1) then
  //  backup;
  //    R1=DISK_LOAD;
  //     R2=pid;
 //     R3=[PTBR+8];
 //    R4=[INODE_TABLE + idx*16 +8];
 //    call MOD_4;
 //   restore;
 //     endif;


 //    if([INODE_TABLE + idx*16 +9]!=-1) then
 //     backup;
   //    R1=DISK_LOAD;
  //     R2=pid;
  //    R3=[PTBR+10];
  //   R4=[INODE_TABLE + idx*16 +9];
 //   call MOD_4;
  //   restore;
 //   endif;


  //  if([INODE_TABLE + idx*16 +10]!=-1) then
   //     backup;
 //     R1=DISK_LOAD;
  //    R2=pid;
  //    R3=[PTBR+12];
  //  R4=[INODE_TABLE + idx*16 +10];
  //    call MOD_4;
  // restore;
   //    endif;

  
 //    if([INODE_TABLE + idx*16 +11]!=-1) then
   //   backup;
 //     R1=DISK_LOAD;
   //     R2=pid;
  //    R3=[PTBR+14];
 //    R4=[INODE_TABLE + idx*16 +11];
  //   call MOD_4;
 //    restore;
  //   endif;
 

    alias value R9;
   value=0;

      while(value < 10) do
    [DISK_MAP_TABLE + (10*[SYSTEM_STATUS_TABLE+1]) + value]=-1;
     value=value+1;
      endwhile;

      [DISK_MAP_TABLE + (10*[SYSTEM_STATUS_TABLE +1]) +4]=[pos + 8];
    [DISK_MAP_TABLE + (10*[SYSTEM_STATUS_TABLE +1]) +5]=[pos + 9];

   [DISK_MAP_TABLE + (10 * [SYSTEM_STATUS_TABLE + 1]) + 6] = [pos + 10];	
  [DISK_MAP_TABLE + (10 * [SYSTEM_STATUS_TABLE + 1]) + 7] = [pos + 11];	

  value=496;
  while(value<=511) do
  [us_ar_page * 512 + value]=-1;
  value=value+2;
  endwhile;

[[PTBR + 16]*512]=[[PTBR + 8]*512 +1];
 SP=8*512;
 [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 9]=0;
 PTBR=PAGE_TABLE_BASE + (20 * [SYSTEM_STATUS_TABLE +1]);
 ireturn;
