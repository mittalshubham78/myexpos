if(R1 == FREE_USER_AREA_PAGE) then
	backup;

  	R1=RELEASE_PAGE;
  	R2=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) +11];
   	call MOD_2;
   	restore;

  	alias i R12;
   	i=496;

   	while(i <= 511) do
   	if([[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11]*512 + i]==SEMAPHORE) then
     	backup;
    	R1=RELEASE_SEMAPHORE;
   	R2=[SYSTEM_STATUS_TABLE +1];    
   	R3=[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11]*512 + i+1];
    	call MOD_0;
    	restore;
  	endif;
 
	if([[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11]*512 +i]==FILE) then
   	backup;
   	R1=4;
   	R2=[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11]*512 +i +1];
   	call MOD_3;
  	restore;
 	endif;

   	i=i+2;
  	endwhile;

   	return;
 	endif;

if(R1 == EXIT_PROCESS) then
  
 	backup;
  	alias pid R3;
   	pid=R2;

     	if([PROCESS_TABLE + (pid*16) +9]!=9) then
     	alias i R6;
    	i=0;
    	while(i < 16) do
   	if(([PROCESS_TABLE + (i*16) +4]==WAIT_PROCESS) && ([PROCESS_TABLE + (i*16) +5]==pid)) then
      	[PROCESS_TABLE + (i*16) +4]=READY;
        endif;

     	if([PROCESS_TABLE + (i*16) +2]==pid) then
        [PROCESS_TABLE + (i*16) +2]=-1;
        endif;
     	i=i+1;
    	endwhile;
   	endif;
 
   	backup;
  	R1=FREE_USER_AREA_PAGE;
   	R2=pid;
  	call MOD_1;
        restore;

        backup;
  	R1=FREE_PAGE_TABLE;
  	R2=pid;
  	call MOD_1;
  	restore;

 	[PROCESS_TABLE + (pid*16) +4]=TERMINATED;
  	restore;

  	return;
 	endif;

if(R1 == FREE_PAGE_TABLE) then

	alias pid R3;
  	alias i R4;
  	i=4;
   	pid=R2;

  	while(i < 20) do
   	if([PAGE_TABLE_BASE+(pid*20) +i]!=-1) then
   	backup;
   	R1=RELEASE_PAGE;
   	R2=[PAGE_TABLE_BASE + (pid*20) +i];
    	call MOD_2;
   	restore;
  	[PAGE_TABLE_BASE+ (pid*20 )+i]=-1;
   	[PAGE_TABLE_BASE+ (pid*20) +i+ 1]="0000";
  	endif;
	i=i+2;
  	endwhile;


   	i=0;
   	while(i<10) do
   	if([DISK_MAP_TABLE + (pid*10) +i]!=-1 && (i==2 || i==3 || i==8 || i==9)) then
     	backup;
      	R1=RELEASE_BLOCK;
    	R2=[DISK_MAP_TABLE + (pid*10) + i];
    	call MOD_2;
   	restore;
     	endif;
     	[DISK_MAP_TABLE + (pid*10)+i]=-1;
   	i=i+1;
   	endwhile;

	return;
	endif;

if(R1==GET_PCB_ENTRY) then

	alias i R8;
  	i=0;
 
	while(i < 16) do
  	if([PROCESS_TABLE + (i*16) +4]==TERMINATED) then
    	R0=i;
     	[PROCESS_TABLE + (i*16) + 4]=ALLOCATED;
     	[PROCESS_TABLE + (i*16) + 1]=i;
     	[PROCESS_TABLE + (i*16) + 14]=PAGE_TABLE_BASE + i*20;
     	[PROCESS_TABLE + (i*16) + 15]=10;
    	return;
  	endif;
  	i=i+1;
 	endwhile;

	R0=-1;
 	return;
	endif;

if(R1==KILL_ALL) then
   
	alias curr_pid R2;
	alias i R6;
   	i=0;

	alias userarea R7;
  	userarea=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +11];

  	while(i < MAX_FILE_NUM) do
   	backup;
  	R1=ACQUIRE_INODE;
  	R2=[SYSTEM_STATUS_TABLE +1];
   	R3=i;
   	call MOD_0;
  	restore;
   	i=i+1;
 	endwhile;


 	i=2;
 	while(i < 16) do
    	if(i !=curr_pid && [PROCESS_TABLE + i*16 +4]!=TERMINATED) then
       	backup;
   	R1=EXIT_PROCESS;
   	R2=i;
   	call MOD_1;
   	restore;
 	endif;
    	i=i+1;
  	endwhile;

  	i=0;
 	while(i < MAX_FILE_NUM) do
   	backup;
   	R1=RELEASE_INODE;
   	R2=curr_pid;
   	R3=i;
  	call MOD_0;
  	restore;
  	i=i+1;
  	endwhile;

  	return;
endif;
