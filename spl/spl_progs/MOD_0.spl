alias functionnum R1;
alias currentPID R2;

if(functionnum==8) then
  	while([TERMINAL_STATUS_TABLE]==1) do
    	[PROCESS_TABLE + (currentPID*16) +4]=WAIT_TERMINAL;
     	backup;
     	call MOD_5;
    	restore;
   	endwhile;
  	[TERMINAL_STATUS_TABLE]=1;
   	[TERMINAL_STATUS_TABLE +1]=currentPID;
   	return;
   	endif;

if(functionnum==9) then
	if(currentPID!=[TERMINAL_STATUS_TABLE +1]) then
      	R0=-1;
  	return;
   	endif;
 
    	[TERMINAL_STATUS_TABLE]=0;
   	alias i R4;
     	i=0;
    	while(i<16) do
    	if([PROCESS_TABLE+(i*16)+4]==WAIT_TERMINAL) then
      	[PROCESS_TABLE+(i*16)+4]=READY;
     	endif;
      	i=i+1;
   	endwhile;
  	R0=0;
 	return;
 	endif;

if(functionnum==3) then
   	while([DISK_STATUS_TABLE]==1) do
   	[PROCESS_TABLE + (currentPID*16) +4]=WAIT_DISK;
   	backup;
     	call MOD_5;
   	restore;
  	endwhile;
   	[DISK_STATUS_TABLE]=1;
  	[DISK_STATUS_TABLE +4]=currentPID;
  	return;
  	endif;   

if(functionnum==6) then
 	alias i R6;
  	alias free R11;
 	i=0;
  	free=-1;

  	while(i < MAX_SEM_COUNT) do
    	if([SEMAPHORE_TABLE + (i*4) +1]==0) then
        free=i;
      	break;
   	endif;
  	i=i+1;
    	endwhile;

  	if(free == -1) then
   	R0=-1;
  	return;
  	endif;    

 	[SEMAPHORE_TABLE + (free*4) +1]=1;
 	[SEMAPHORE_TABLE + (free*4)]=-1;

  	R0=free;
 	return;
  	endif;

if(functionnum==7) then
  	alias semid R3;
 	alias i R6;

   	if([SEMAPHORE_TABLE + (4*semid)]==currentPID) then
     	[SEMAPHORE_TABLE + (4*semid)]=-1;

   	i=0;

  	while(i < 16) do
	if(([PROCESS_TABLE + (i*16) +4]==WAIT_SEMAPHORE) && ([PROCESS_TABLE +(i*16)+5]==semid)) then
    	[PROCESS_TABLE + (i*16) +4]=READY;
   	endif;
  	i=i+1;
 	endwhile;
  	R0=0;

 	else
  	R0=-1;
 	endif;

 	[SEMAPHORE_TABLE + (semid*4) +1]=[SEMAPHORE_TABLE + (semid*4) +1]-1;
  	return;
 	endif ;


if(functionnum ==4) then
	alias index R3;

	while([FILE_STATUS_TABLE + (4*index)]!=-1) do
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +4]=WAIT_FILE;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) +5]=index;
	backup;
	call MOD_5;
	restore;
	endwhile;

	if([INODE_TABLE + (16*index) +1]==-1) then
	R0=-1;
	return;
	endif;

	[FILE_STATUS_TABLE +(4*index)]=currentPID; 
	R0=0;
	return;
	endif;

if(functionnum == 5) then

	alias index R3;

	if([FILE_STATUS_TABLE + (4*index)]!=currentPID) then
	R0=-1;
	return;
	endif;
  
	[FILE_STATUS_TABLE + (4*index)]=-1;
 
	backup; 
	alias i R4;
	i=0;

	while(i < 16) do
	if(([PROCESS_TABLE + (i*16) +4]==WAIT_FILE) && ([PROCESS_TABLE + (i*16) +5]==index)) then
	[PROCESS_TABLE + (i*16) +4]=READY;
	endif;
	i=i+1;
	endwhile;
	restore;
	R0=0;
	return;
	endif;

if(functionnum == 1) then
 	alias buffer R3;
 	while([BUFFER_TABLE + 4*buffer + 2]!=-1) do
   	[PROCESS_TABLE + (currentPID *16) + 4]=WAIT_BUFFER;
    	[PROCESS_TABLE + (currentPID *16) +5]=buffer;
   	backup;
    	call MOD_5;
  	restore;
  	endwhile;

 	[BUFFER_TABLE + 4*buffer + 2]=currentPID;
   	return;
 	endif;

if(functionnum ==2) then
  	alias buffer R3;
 
   	if([BUFFER_TABLE + 4*buffer + 2]!=currentPID) then
      	R0=-1;
     	return;
   	endif;

  	[BUFFER_TABLE + 4*buffer + 2]=-1;

    	alias i R4;
    	i=0;

  	while(i < 16) do
 	if(([PROCESS_TABLE + (i*16) +4]==WAIT_BUFFER) && ([PROCESS_TABLE + (i*16) +5]==buffer)) then
   	[PROCESS_TABLE + (i*16) +4]=READY;
  	endif;

   	i=i+1;
 	endwhile;
 	return;
endif;
