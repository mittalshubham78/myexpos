//library 
loadi(63,13);
loadi(64,14);

//load INIT program
loadi(65,7);

//load INT_10 program
loadi(22,35);
loadi(23,36);

//load INT7 for program
loadi(16,29);
loadi(17,30);

//load exception handler
loadi(2,15);
loadi(3,16);

//load timer interrupt
loadi(4,17);
loadi(5,18);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

//load console interrupt handler
loadi(8,21);
loadi(9,22);

//load interrupt 6
loadi(14,27);
loadi(15,28);

//load interrupt 9
loadi(20,33);
loadi(21,34);

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);
loadi(45,58);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load inode table
loadi(59,3);
loadi(60,4);

//load exec process
//loadi(83,69);

//load disk free list
loadi(61,2);

//load interrupt 8
loadi(18,31);
loadi(19,32);

//load interrupt 11
loadi(24,37);
loadi(25,38);

//load interrupt 15
loadi(32,45);
loadi(33,46);

//load interrupt 13
loadi(28,41);
loadi(29,42);

//load interrupt 14
loadi(30,43);
loadi(31,44);

//load interrupt 4
loadi(10,23);
loadi(11,24);

//load root file
 loadi(62,5);

//load interrupt 5
  loadi(12,25);
  loadi(13,26);

//load file manager module
  loadi(46,59);
  loadi(47,60);

//load interrupt 16
 loadi(34,47);
 loadi(35,48);

//load interrupt 12
 loadi(26,39);
 loadi(27,40);

//load interrupt 17
 loadi(36,49);
 loadi(37,50);

//load shell process
 loadi(67,9);
 loadi(68,10);

//load pager module
 loadi(52,65);
 loadi(53,66);

        [SYSTEM_STATUS_TABLE + 4]=0;
	[SYSTEM_STATUS_TABLE + 5]=0;
	[TERMINAL_STATUS_TABLE]=0;

	alias i R0;
	i=0;
 

	while(i < 16) do
        [PROCESS_TABLE + (i*16)]=0;
  	[PROCESS_TABLE+(i*16)+4]=TERMINATED;
 	[PROCESS_TABLE + (i*16) + 6]=0;
   	i=i+1;
  	endwhile;

	i=0;
 
 	while(i < 128) do
   	if(i <= 82) then
   	[MEMORY_FREE_LIST +i]=1;

    	else
    	[MEMORY_FREE_LIST + i]=0;
    
        print(i);
        print([MEMORY_FREE_LIST + i]);
  	endif;
   	i=i+1;
    	endwhile;

         breakpoint;


	[SYSTEM_STATUS_TABLE +2]=45;
	[SYSTEM_STATUS_TABLE +3]=0;
	[DISK_STATUS_TABLE]=0;


	i=0;

 	while(i < MAX_SEM_COUNT) do
    	[SEMAPHORE_TABLE + (4*i)]=-1;
    	[SEMAPHORE_TABLE + (4*i) +1]=0;
  	i=i+1;
  	endwhile;

	i=0;

 	while(i < MAX_FILE_NUM) do
  	[FILE_STATUS_TABLE + (4*i)]=-1;
   	[FILE_STATUS_TABLE + (4*i) +1]=-1;
   	i=i+1;
  	endwhile;

	i=0;
 	while(i < MAX_BUFFER) do
  	[BUFFER_TABLE + 4*i]=-1;
   	[BUFFER_TABLE + 4*i +1]=0;
  	[BUFFER_TABLE + 4*i +2]=-1;
  	i=i+1;
 	endwhile;

	i=0;

	while(i < MAX_OPENFILE_NUM) do
  	[OPEN_FILE_TABLE + i*4]=-1;
   	[OPEN_FILE_TABLE + i*4 +1]=0;
  	i=i+1;
 	endwhile;

	PTBR=PAGE_TABLE_BASE+20;
	PTLR=10;

	[PTBR+0]=63;
	[PTBR+1]="0100";
	[PTBR+2]=64;
	[PTBR+3]="0100";

	[PTBR+4]=-1;
	[PTBR+5]="0000";
	[PTBR+6]=-1;
	[PTBR+7]="0000";

	[PTBR+8]=65;
	[PTBR+9]="0100";
	[PTBR+10]=-1;
	[PTBR+11]="0000";
	[PTBR+12]=-1;
	[PTBR+13]="0000";
	[PTBR+14]=-1;
	[PTBR+15]="0000";

	[PTBR+16]=66;
	[PTBR+17]="0110";
	[PTBR+18]=-1;
	[PTBR+19]="0000";

	PTBR = PTBR+20;

	[PTBR+0]=63;
	[PTBR+1]="0100";
	[PTBR+2]=64;
	[PTBR+3]="0100";

	[PTBR+4]=-1;
	[PTBR+5]="0000";
	[PTBR+6]=-1;
	[PTBR+7]="0000";

	[PTBR+8]=67;
	[PTBR+9]="0100";
	[PTBR+10]=68;
	[PTBR+11]="0100";
	[PTBR+12]=-1;
        [PTBR+13]="0000";
	[PTBR+14]=-1;
        [PTBR+15]="0000";

	[PTBR+16]=78;
	[PTBR+17]="0110";
	[PTBR+18]=79;
	[PTBR+19]="0110";

	PTBR=PTBR-40;

        alias process R5;
        process = PROCESS_TABLE + 16;
	[process+1]=1;
	[process+3]=0;
	[process+4]=CREATED;
	[process+11]=77;
	[process+13]=8*512;
	[process+12]=0;
	[process+14]=PAGE_TABLE_BASE +20;
	[process+15]=10;
	[66*512]=[65*512+1];

        process = PROCESS_TABLE + 32;

	[process+1]=2;
        [process+2]=1;
	[process+4]=TERMINATED;
	[process+11]=80;
	[process+13]=8*512;
	[process+12]=0;
	[process+14]=PAGE_TABLE_BASE+40;
	[process+15]=10;
	[78*512]=[67*512+1];

	i=496;

  	while(i<=511) do
   	[77*512+i]=-1;
   	i=i+2;
  	endwhile;

        i = 0;
  
 	while(i < 10) do
        [DISK_MAP_TABLE + 20 + i]=-1;
 	i=i+1;
	endwhile;

	[DISK_MAP_TABLE + 20 + 4]=67;
	[DISK_MAP_TABLE + 20 + 5]=68;

return;
