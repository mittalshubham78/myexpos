

  if(R1==GET_FREE_PAGE)then
    [SYSTEM_STATUS_TABLE +3]=[SYSTEM_STATUS_TABLE + 3]+1;
   
     while([SYSTEM_STATUS_TABLE + 2]==0)  do
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 4]=WAIT_MEM;
    backup;
    call MOD_5;
   restore;
   endwhile;
   [SYSTEM_STATUS_TABLE +3]=[SYSTEM_STATUS_TABLE +3]-1;
   [SYSTEM_STATUS_TABLE +2]=[SYSTEM_STATUS_TABLE +2]-1;

    alias i R3;
     i=76; 
     while(i < MAX_MEM_PAGE) do
     if([MEMORY_FREE_LIST +i]==0) then
       [MEMORY_FREE_LIST+ i]=1;
         break;
   endif;
   i=i+1;
    endwhile;
  R0=i;
  return;
  endif;
     

 if(R1==RELEASE_PAGE) then
   alias page_num R2;
   [MEMORY_FREE_LIST + page_num]=[MEMORY_FREE_LIST + page_num]-1;
  
   if([MEMORY_FREE_LIST + page_num]==0) then
    [SYSTEM_STATUS_TABLE + 2]=[SYSTEM_STATUS_TABLE + 2] +1;
        endif;
   
   alias i R4;
    i=0;
    
    while(i < 16) do
    if([PROCESS_TABLE + (i*16) +4]==WAIT_MEM) then
     [PROCESS_TABLE + (i*16) + 4]=READY;
    endif;
     i=i+1;
   endwhile;
  return;
 endif;

  if(R1==GET_CODE_PAGE) then
   alias i R4;
  alias block_num R2;
    i=1;
  
   while(i < 16) do
   alias j R5;
    j=4;

    while(j < 8)  do
   if(([DISK_MAP_TABLE + (10*i) + j]==block_num) && ([PAGE_TABLE_BASE + (i*20) + j*2]!=-1)) then
 
      R0=[PAGE_TABLE_BASE + (i * 20) + (j * 2)];
 [MEMORY_FREE_LIST + R0]=[MEMORY_FREE_LIST + R0]+1;
    return;
  endif;
   j=j+1;
    endwhile;
   i=i+1;
  endwhile;

   R1=GET_FREE_PAGE;
  call MOD_2;
     R1=DISK_LOAD;
     R3=R0;
    R4=block_num;
  R2=[SYSTEM_STATUS_TABLE +1];
  call MOD_4;
   return;
  endif;

    if(R1==RELEASE_BLOCK) then
  alias block_num R2;
   [DISK_FREE_LIST + block_num]=[DISK_FREE_LIST + block_num]-1;
  return;
 endif;

if(R1==GET_FREE_BLOCK) then
   alias i R4;
   i=0;

  alias block R5;
  block=-1;

  while(i < 512) do
   if([DISK_FREE_LIST + i]==0) then
     block=i;
   break;
  endif;
 i=i+1;
  endwhile;

  R0=block;
  return;
endif;
  //return;
