alias function R1;

if(function == 3) then
	alias file R2;
	alias i R8;
  	i=0;
 	alias inode_entry R4;
   	inode_entry =-1;
  
  	while(i < MAX_FILE_NUM) do
     	if([INODE_TABLE + i*16 +1]==file) then
        inode_entry = i;
     	break;
   	endif;
  	i=i+1;
  	endwhile;
         
 	if(inode_entry == -1) then
   	R0=-1;
  	return;
 	endif;

 	backup;
  	R1=4;
   	R2=[SYSTEM_STATUS_TABLE +1];
   	R3=inode_entry;
   	call MOD_0;
	if(R0 == -1) then
	restore;
	return;
	endif;
 	restore;

 	if([INODE_TABLE + inode_entry*16]==EXEC) then
    	R0 = -1;
  	return;
 	endif;

	alias open_entry R7;
   	open_entry = -1;

 	i=0;
  	while(i < MAX_OPENFILE_NUM) do
   	if([OPEN_FILE_TABLE + 4*i]==-1) then
        open_entry = i;
     	break;
  	endif;
   	i=i+1;
  	endwhile;

  	if(open_entry == -1) then
      	backup;
        R1=5;
        R2=[SYSTEM_STATUS_TABLE +1];
        R3=inode_entry;
        call MOD_0;
       	restore;

       	R0=-2;
    	return;
  	endif;

 	if(file == "root") then
    	[OPEN_FILE_TABLE + open_entry*4]=INODE_ROOT;
   
    	else
    	if([FILE_STATUS_TABLE + inode_entry * 4 +1]==-1) then
       	[FILE_STATUS_TABLE + inode_entry * 4 +1]=1;
     
     	else
 [FILE_STATUS_TABLE + inode_entry * 4 +1]=[FILE_STATUS_TABLE + inode_entry * 4 + 1] +1;
    	endif;

    	[OPEN_FILE_TABLE + open_entry * 4]=inode_entry;
  	endif;

  	[OPEN_FILE_TABLE + open_entry * 4 + 1]=1;
   	[OPEN_FILE_TABLE + open_entry * 4 + 2]=0;

      	backup;
        R1=5;
        R2=[SYSTEM_STATUS_TABLE +1];
        R3=inode_entry;
        call MOD_0;
        restore;

   	R0 = open_entry;
   	return;
  	endif;

if(function == 4) then
	alias file_index R2;
  
  	alias inode_entry R7;
  	inode_entry = [OPEN_FILE_TABLE + file_index * 4];
 
 	[OPEN_FILE_TABLE + file_index * 4 +1]=[OPEN_FILE_TABLE + file_index * 4         +1]-1;  
   	if([OPEN_FILE_TABLE + file_index * 4 +1]==0) then
      	[OPEN_FILE_TABLE + file_index * 4]=-1;
      	[OPEN_FILE_TABLE + file_index *4 +1]=-1;
  
     	if([INODE_TABLE + inode_entry*16 + 1]!="root") then
	[FILE_STATUS_TABLE + inode_entry*4 +1]=[FILE_STATUS_TABLE + inode_entry*	4 +1]-1;
     
      	if([FILE_STATUS_TABLE + inode_entry*4 +1]==0) then
        [FILE_STATUS_TABLE + inode_entry*4 +1]=-1;
      	endif;
    	endif;
   	endif;

  	return;
  	endif;        

if(function ==2) then
	breakpoint;
    	alias disk_block R2;
   	alias offset R3;
	alias memory_add R4;
   	alias buffer R5;
    	buffer = disk_block % 4;
    
   	breakpoint;
    	backup;
    	R1=1;
   	R2=[SYSTEM_STATUS_TABLE +1];
    	R3=buffer;
  	call MOD_0;
    	restore;

   	breakpoint;

    	if([BUFFER_TABLE + 4*buffer] != disk_block) then
        if([BUFFER_TABLE + 4*buffer + 1]==1) then
        backup;
        R1=1;
        R2=[SYSTEM_STATUS_TABLE +1];
        R3=71+buffer;
        R4=[BUFFER_TABLE + 4*buffer];
        call MOD_4;
        restore;
       
        [BUFFER_TABLE + 4*buffer +1]=0;
        endif;

   	breakpoint;
       	backup;
      	R1=2;
      	R4=disk_block;
     	R2=[SYSTEM_STATUS_TABLE +1];
      	R3=71+buffer;
    	call MOD_4;
     	restore;
  
     	[BUFFER_TABLE + 4*buffer]=disk_block;
    	endif;

     	[memory_add]=[(71 + buffer)*512 + offset];

   	backup;
    	R1=2;
    	R2=[SYSTEM_STATUS_TABLE +1];
   	R3=buffer;
   	call MOD_0;
   	restore;

   	return;
	endif;

if(function ==1) then
	alias block_num R2;
 	alias offset R3;
  	alias word R4;
 	alias buffer R5;
 
   	buffer = block_num % 4;

  	backup;
  	R1=ACQUIRE_BUFFER;
  	R2=[SYSTEM_STATUS_TABLE +1];
  	R3=buffer;
 	call MOD_0;
  	restore;

 	if([BUFFER_TABLE + buffer*4]!=block_num) then
     	if([BUFFER_TABLE + buffer*4 + 1]==1) then
     	backup;
    	R1=DISK_STORE;
  	R2=[SYSTEM_STATUS_TABLE +1];
  	R3=71+buffer;
 	R4=[BUFFER_TABLE + buffer*4];
   	call MOD_4;
  	restore;

     	[BUFFER_TABLE + 4*buffer +1]=0;
  	endif;

  	backup;
  	R1=DISK_LOAD;
  	R2=[SYSTEM_STATUS_TABLE +1];
 	R3=71+buffer;
 	R4=block_num;
  	call MOD_4;
  	restore;

  	[BUFFER_TABLE + 4*buffer]=block_num;
   	endif;

   	[(71 + buffer)*512 +offset]=word;
  	[BUFFER_TABLE + 4*buffer + 1]=1;

  	backup;
  	R1=RELEASE_BUFFER;
  	R2=[SYSTEM_STATUS_TABLE +1];
  	R3=buffer;
  	call MOD_0;
  	restore;

  	return;
	endif;
